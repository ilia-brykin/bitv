{
  "_STEP_9_4_1_2_NAME_": "Name, Rolle, Wert verfügbar",
  "_STEP_9_4_1_2_NAME_MENU_": "9.4.1.2 Name, Rolle, Wert verfügbar",
  "_STEP_9_4_1_2_WHAT_CHECKED_1_": "<p>Alle selbst gestalteten Komponenten einer Website (also Elemente oder Widgets, die nicht auf interaktiven HTML-Elementen beruhen) sind so umgesetzt, dass die semantischen Informationen (Name, Rolle, Eigenschaften) vorhanden sind. Werden nicht semantische Elemente (etwa <code>div</code> oder <code>span</code>) eingesetzt und mithilfe von JavaScript zu Bedienelementen umfunktioniert, wird die Semantik mithilfe von WAI-ARIA bereitgestellt.</p>",
  "_STEP_9_4_1_2_WHAT_CHECKED_2_": "<p>Die wechselnden Zustände der Bedienelemente werden nicht nur visuell über CSS und JavaScript abgebildet, sondern auch über scriptgesteuerte Änderung der Werte der ARIA-Attribute, damit die Semantik auch bei nicht-visueller Nutzung verfügbar ist.</p>",
  "_STEP_9_4_1_2_WHY_CHECKED_1_": "<p>Standard-HTML-Bedienelemente wie Links (<code>a</code>-Element) und Formularelemente (<code>input</code>, <code>button</code>, <code>checkbox</code> etc.) haben Namen, Rollen, Wert und Zustände, sofern sie gemäß Spezifikation umgesetzt sind und sind für Hilfsmittel wie Screenreader generell erkennbar. So bekommen etwa blinde Nutzer mit, wenn sie auf einen Link tabben und können diesem dann folgen. Auch Zustände, beispielsweise einer Checkbox (ausgewählt oder nicht ausgewählt) werden vermittelt. Interaktive Schaltflächen sollten deshalb mit Hilfe von geeigneten nativen HTML-Elementen umgesetzt werden, damit ihre Bedeutung klar wird.</p>",
  "_STEP_9_4_1_2_WHY_CHECKED_2_": "<p>Falls ungeeignete (weil nicht semantische) Elemente (etwa <code>div</code> oder <code>span</code>) mithilfe von JavaScript zu Links oder Bedienelementen umfunktioniert werden, kann die Semantik mit Hilfe von WAI-ARIA bereit gestellt werden. Dies betrifft auch Komponenten (Widgets wie z. B. Tabpanels, Akkordeons etc.), die in nativem HTML so nicht zur Verfügung stehen und mit Hilfe von nicht semantischen Elementen und Scripten umgesetzt sind. WAI-ARIA Attribute helfen, diese zu verstehen, indem semantische Informationen vom Browser an die Hilfsmitteltechnologien übermittelt werden.</p>",
  "_STEP_9_4_1_2_HOW_CHECKED_1_": "<h3 id=\"_1_anwendbarkeit_des_prüfschritts\">1. Anwendbarkeit des Prüfschritts</h3>",
  "_STEP_9_4_1_2_HOW_CHECKED_2_": "<p>Der Prüfschritt ist anwendbar, wenn die Seite interaktive Bedienelemente (Links, Formularelemente, oder programmierte Elemente, die auf <code>onclick</code> oder andere Event Handler reagieren) enthält.</p>",
  "_STEP_9_4_1_2_HOW_CHECKED_3_": "<h3 id=\"_2_prüfung\">2. Prüfung</h3>",
  "_STEP_9_4_1_2_HOW_CHECKED_4_": "<ol><li><p>Seite im Firefox Browser aufrufen</p></li><li><p>Bedienelemente der Seite auf korrekte Semantik prüfen:</p><ul><li><p>Gibt es offensichtliche Links oder Schaltflächen ohne <code>href</code>-Attribut? Dies lässt sich z. B. mit Hilfe der <a href=\"http://www.bitvtest.de/werkzeugliste-2011#webdeveloper\"> Web Developer Toolbar</a> über die Funktion <em>Information</em> &gt; <em>Verweisdetails anzeigen (display link details)</em> feststellen.</p></li><li><p>Gibt es Formularelemente wie Checkboxen oder Radio-Buttons, die von der systemüblichen Darstellung abweichen, da sie mit anderen Elementen wie <code>div</code> oder <code>img</code> nachgebildet wurden?</p></li><li><p>Gibt es auf der Seite selbstgebaute Widgets wie etwa Schieberegler oder Tabpanels?</p></li></ul></li><li><p>Mittels Developer Tools prüfen, ob über WAI-ARIA Name, Eigenschaften und gegebenenfalls Zustände abgebildet werden. Zustandsänderungen müssen durch Änderungen der Attribute-Werte reflektiert werden. Grafische Zustandsänderungen durch den geskripteten Austausch von Bildern, die anstelle von Bedienelementen eingesetzt werden, müssen auch für Hilfsmittel verfügbare sinnvolle Änderungen von <code>alt</code>-Attributen bzw. WAI-ARIA Eigenschaften erzeugen.</p></li></ol>",
  "_STEP_9_4_1_2_HOW_CHECKED_5_": "<h3 id=\"_3_hinweise\">3. Hinweise</h3>",
  "_STEP_9_4_1_2_HOW_CHECKED_6_": "<ul><li><p>Im Zweifelsfall den <a href=\"https://www.w3.org/WAI/ARIA/apg/\"> ARIA Authoring Practices Guide</a> konsultieren.</p></li><li><p>Unsemantische Elemente wie <code>span</code> oder <code>div</code> sind nur dann mit der Tastatur fokussierbar, wenn das <code>tabindex</code>-Attribut gesetzt wurde. Falls das nicht der Fall ist, müssen Elemente also gegebenenfalls mit dem Cursor-Werkzeug des aViewers untersucht werden.</p></li><li><p>Für die Prüfung von komplexen Widgets sollte der Screenreader ergänzend genutzt werden.</p></li><li><p>Bei dynamischen eingeblendeten Elementen (etwa den Ausklapplisten von Comboboxen) kann es notwendig sein, den laufenden Script anzuhalten, um eingeblendete Inhalte zu untersuchen. Hierzu eignet sich die Eingabe des Scripts <code>setTimeout(function(){debugger}, 5000);</code> in der Konsole der Entwicklerwerkzeuge (diese sind aufrufbar mit F12), unmittelbar gefolgt vom Aufruf der einzublendenden Inhalte. Fünf Sekunden nach Aktivierung des Konsolen-Scripts stoppt die Ausführung des Scripts der Seite, die dynamischen Elemente können nur mittels Entwicklerwerkzeugen untersucht werden.</p></li></ul>",
  "_STEP_9_4_1_2_HOW_CHECKED_7_": "<h3 id=\"_4_bewertung\">4. Bewertung</h3>",
  "_STEP_9_4_1_2_HOW_CHECKED_8_": "<h4 id=\"_nicht_erfüllt\">Nicht erfüllt</h4>",
  "_STEP_9_4_1_2_HOW_CHECKED_9_": "<ul><li><p>Wichtige Bedienelemente sind mit unsemantischen HTML-Elementen oder <code>a</code>-Elementen ohne <code>href</code>-Attribut umgesetzt, ohne dass die Semantik mit WAI-ARIA nachgebildet wurde.</p></li></ul>",
  "_STEP_9_4_1_2_SOURCES_1_": "<h3 id=\"_wai_aria_spezifikation\">WAI-ARIA Spezifikation</h3>",
  "_STEP_9_4_1_2_SOURCES_2_": "<ul><li><p><a href=\"https://www.w3.org/TR/wai-aria/\" class=\"bare\">https://www.w3.org/TR/wai-aria/</a></p></li><li><p><a href=\"https://www.w3.org/TR/wai-aria-1.1/\"> Accessible Rich Internet Applications (WAI-ARIA) 1.1</a> (zur Zeit <em>Candidate Recommendation</em>)</p></li></ul>",
  "_STEP_9_4_1_2_SOURCES_3_": "<h3 id=\"_aria_in_html\">ARIA in HTML</h3>",
  "_STEP_9_4_1_2_SOURCES_4_": "<ul><li><p><a href=\"https://www.w3.org/TR/html-aria/\"> ARIA in HTML</a></p></li></ul>",
  "_STEP_9_4_1_2_SOURCES_5_": "<h3 id=\"_aria_widgets\">ARIA-Widgets</h3>",
  "_STEP_9_4_1_2_SOURCES_6_": "<ul><li><p><a href=\"https://www.w3.org/WAI/ARIA/apg/\"> ARIA Authoring Practice Guide (APG)</a></p></li></ul>",
  "_STEP_9_4_1_2_CLASSIFICATION_1_": "<h3 id=\"_abgrenzung_von_anderen_prüfschritten\">Abgrenzung von anderen Prüfschritten</h3>",
  "_STEP_9_4_1_2_CLASSIFICATION_2_": "<p>In diesem Prüfschritt geht es nicht um die Bewertung der Tastaturbedienbarkeit geskripteter Bedienelemente. Dies ist Gegenstand von Prüfschritt 9.2.1.1 \"Ohne Maus nutzbar\".</p>",
  "_STEP_9_4_1_2_CLASSIFICATION_3_": "<h3 id=\"_einordnung_des_prüfschritts_nach_wcag_2_1\">Einordnung des Prüfschritts nach WCAG 2.1</h3>",
  "_STEP_9_4_1_2_CLASSIFICATION_4_": "<h4 id=\"_guideline\">Guideline</h4>",
  "_STEP_9_4_1_2_CLASSIFICATION_5_": "<ul><li><p><a href=\"https://www.w3.org/TR/WCAG21/#compatible\"> Guideline 4.1 Compatible: Maximize compatibility with current and future user agents, including assistive technologies.</a></p></li></ul>",
  "_STEP_9_4_1_2_CLASSIFICATION_6_": "<h4 id=\"_success_criterion\">Success criterion</h4>",
  "_STEP_9_4_1_2_CLASSIFICATION_7_": "<ul><li><p><a href=\"https://www.w3.org/TR/WCAG21/#name-role-value\"> 4.1.2 Name, Role, Value</a> (Level A)</p></li></ul>",
  "_STEP_9_4_1_2_CLASSIFICATION_8_": "<h4 id=\"_techniques\">Techniques</h4>",
  "_STEP_9_4_1_2_CLASSIFICATION_9_": "<h5 id=\"_general_techniques\">General Techniques</h5>",
  "_STEP_9_4_1_2_CLASSIFICATION_10_": "<ul><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/general/G10.html\"> G10: Creating components using a technology that supports the accessibility API features of the platforms on which the user agents will be run to expose the names and roles, allow user-settable properties to be directly set, and provide notification of changes</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/general/G108.html\"> G108: Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/general/G135.html\"> G135: Using the accessibility API features of a technology to expose names and roles, to allow user-settable properties to be directly set, and to provide notification of changes</a></p></li></ul>",
  "_STEP_9_4_1_2_CLASSIFICATION_11_": "<h5 id=\"_html_techniques\">HTML Techniques</h5>",
  "_STEP_9_4_1_2_CLASSIFICATION_12_": "<ul><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/html/H64.html\"> H64: Using the title attribute of the frame and iframe elements</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/html/H91.html\"> H91: Using HTML form controls and links</a></p></li></ul>",
  "_STEP_9_4_1_2_CLASSIFICATION_13_": "<h5 id=\"_aria_techniques\">ARIA Techniques</h5>",
  "_STEP_9_4_1_2_CLASSIFICATION_14_": "<ul><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA4.html\"> ARIA4: Using a WAI-ARIA role to expose the role of a user interface component</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA5.html\"> ARIA5: Using WAI-ARIA state and property attributes to expose the state of a user interface component</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA14.html\"> ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA16.html\"> ARIA16: Using aria-labelledby to provide a name for user interface controls</a></p></li></ul>",
  "_STEP_9_4_1_2_CLASSIFICATION_15_": "<h4 id=\"_failures\">Failures</h4>",
  "_STEP_9_4_1_2_CLASSIFICATION_16_": "<ul><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/failures/F15.html\"> F15: Failure of Success Criterion 4.1.2 due to implementing custom controls that do not use an accessibility API for the technology, or do so incompletely</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/failures/F20.html\"> F20: Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/failures/F59.html\"> F59: Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML</a></p></li><li><p><a href=\"https://www.w3.org/WAI/WCAG21/Techniques/failures/F79.html\"> F79: Failure of Success Criterion 4.1.2 due to the focus state of a user interface component not being programmatically determinable or no notification of change of focus state available</a></p></li></ul>"
}